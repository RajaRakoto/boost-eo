{"[array]: (a0 -> b1) sort in ascending order -> array":{"prefix":"bbeo-js-array-ascElement","body":["${1:array_var}.sort((${2:a},${3:b}) => ${2:a} - ${3:b})"],"description":"[array]: (a0 -> b1) sort in ascending order -> array"},"[array]: (b1 -> a0) sort in descending order -> array":{"prefix":"bbeo-js-array-descElement","body":["${1:array_var}.sort((${2:a},${3:b}) => ${3:b} - ${2:a})"],"description":"[array]: (b1 -> a0) sort in descending order -> array"},"[array]: Split an array [start, end+1] -> array":{"prefix":"bbeo-js-array-slice","body":["${1:array_var}.slice(${2:start}, ${3:end+1})"],"description":"[array]: split an array [n, n+1] -> array"},"[array]: Join an array from a delimiter to get a string -> string":{"prefix":"bbeo-js-array-join","body":["${1:array_var}.join(${2:delimiter})"],"description":"[array]: join an array from a delimiter to get a string -> string"},"[array]: Flatten the elements of a nested array to a specific depth -> array":{"prefix":"bbeo-js-array-flat","body":["${1:array_var}.flat(${2:depth})"],"description":"[array]: Flatten the elements of a nested array to a specific depth -> array"},"[array]: Check if an array is empty -> boolean":{"prefix":"bbeo-js-array-isEmpty","body":["${1:array_var}.length === 0 ? true : false"],"description":"[array]: Check if an array is empty -> boolean"},"[array]: Remove duplicates from an array -> array":{"prefix":"bbeo-array-js-removeDuplicates","body":["[...new Set(${1:array_var})]"],"description":"[array]: Remove duplicates from an array -> array"},"[array]: Reverse all element in an array -> array":{"prefix":"bbeo-js-array-reverse","body":["${1:array_var}.reverse()"],"description":"[array]: Reverse all element in an array -> array"},"[basic]: Conditional statement":{"prefix":"bbeo-js-basic-ifCondition","body":["if (${1:condition}) {","    ${3:condition_body}","} else if (${2:condition}) {","    ${4:condition_body}","} else {","    ${5:condition_body}","}"],"description":"[basic]: Conditional statement"},"[basic]: For loop":{"prefix":"bbeo-js-basic-forLoop","body":["for (let ${1:index} = 0; ${1:index} < ${2:array_length}; ${1:index}++) {","    ${3:for_body}","}"],"description":"[basic]: For loop"},"[basic]: While loop":{"prefix":"bbeo-js-basic-whileLoop","body":["while (${1:condition}) {","    ${2:while_body}","}"],"description":"[basic]: While loop"},"[basic]: Do while loop":{"prefix":"bbeo-js-basic-doWhileLoop","body":["do {","    ${2:do_body}","} while (${1:condition});"],"description":"[basic]: Do while loop"},"[basic]: For in loop":{"prefix":"bbeo-js-basic-forInLoop","body":["for (let ${1:e} in ${2:array_var}) {","    ${3:for_body}","}"],"description":"[basic]: For in loop"},"[basic]: For of loop":{"prefix":"bbeo-js-basic-forOfLoop","body":["for (let ${1:e} of ${2:array_var}) {","    ${3:for_body}","}"],"description":"[basic]: For of loop"},"[basic]: For each loop":{"prefix":"bbeo-js-basic-forEachLoop","body":["${2:array_var}.forEach((${1:e}) => {","    ${3:for_body}","});"],"description":"[basic]: For each loop"},"[basic]: Switch statement":{"prefix":"bbeo-js-basic-switchStatement","body":["switch (${1:condition}) {","    case ${2:condition_value}:","        ${3:switch_body}","        break;","    case ${4:condition_value}:","        ${5:switch_body}","        break;","    default:","        ${6:switch_body}","        break;","}"],"description":"[basic]: Switch statement"},"[basic]: Try catch statement":{"prefix":"bbeo-js-basic-tryCatchStatement","body":["try {","    ${1:try_body}","} catch (${2:error}) {","    ${3:catch_body}","}"],"description":"[basic]: Try catch statement"},"[basic]: Try catch finally statement":{"prefix":"bbeo-js-basic-tryCatchFinallyStatement","body":["try {","    ${1:try_body}","} catch (${2:error}) {","    ${3:catch_body}","} finally {","    ${4:finally_body}","}"],"description":"[basic]: Try catch finally statement"},"[basic]: Try catch finally statement with multiple catch blocks":{"prefix":"bbeo-js-basic-tryCatchFinallyStatementMultiple","body":["try {","    ${1:try_body}","} catch (${2:error}) {","    ${3:catch_body}","} catch (${4:error}) {","    ${5:catch_body}","} finally {","    ${6:finally_body}","}"],"description":"[basic]: Try catch finally statement with multiple catch blocks"},"[bom]: Create window event listener":{"prefix":"bbeo-js-bom-addWindowEventListener","body":["window.addEventListener(${1:'resize, scroll'}, ${2:callback})"],"description":"[bom]: Create window event listener"},"[cast]: method 1 - Convert any object to string -> string":{"prefix":"bbeo-js-cast-objToString1","body":["${1:object}.toString()"],"description":"[cast]: method 1 - Convert any object to string -> string"},"[cast]: method 2 - Convert any object to string -> string":{"prefix":"bbeo-js-cast-objToString2","body":["String(${1:object})"],"description":"[cast]: method 2 - Convert any object to string -> string"},"[cast]: method 1 - convert string to array -> array":{"prefix":"bbeo-js-cast-stringToArray1","body":["Array.from(${1:string_var})"],"description":"[cast]: method 1 - convert string to array -> array"},"[cast]: method 2 - convert string to array -> array":{"prefix":"bbeo-js-cast-stringToArray2","body":["[... ${1:string_var}]"],"description":"[cast]: method 2 - convert string to array -> array"},"[cast]: method 3 - convert string to array -> array":{"prefix":"bbeo-js-cast-stringToArray3","body":["${1:string_var}.split``"],"description":"[cast]: method 3 - convert string to array -> array"},"[cast]: method 1 - convert string to number -> number":{"prefix":"bbeo-js-cast-stringToNumber1","body":["Number(${1:string_var})"],"description":"[cast]: method 1 - convert string to number -> number"},"[cast]: method 2 - convert string to number -> number":{"prefix":"bbeo-js-cast-stringToNumber2","body":["parseInt(${1:string_var})"],"description":"[cast]: method 2 - convert string to number -> number"},"[cast]: hex -> dec":{"prefix":"bbeo-js-cast-hex2dec","body":["+('0x'+ ${1:hex_var})"],"description":"[cast]: hex -> dec"},"[cast]: dec -> hex":{"prefix":"bbeo-js-cast-dec2hex","body":["${1:dec_var}.toString(16)"],"description":"[cast]: dec -> hex"},"[cast]: oct -> dec":{"prefix":"bbeo-js-cast-oct2dec","body":["parseInt(${1:oct_var}, 8)"],"description":"[cast]: oct -> dec"},"[cast]: dec -> oct":{"prefix":"bbeo-js-cast-dec2oct","body":["${1:dec_var}.toString(8)"],"description":"[cast]: dec -> oct"},"[cast]: bin -> dec":{"prefix":"bbeo-js-cast-bin2dec","body":["parseInt(${bin_var}, 2)"],"description":"[cast]: bin -> dec"},"[cast]: dec -> bin":{"prefix":"bbeo-js-cast-dec2bin","body":["${1:dec_var}.toString(2)"],"description":"[cast]: dec -> bin"},"[class]: Create getter pattern":{"prefix":"bbeo-js-class-getter","body":["get ${1:property_name} () { return this.${1:property_name}; }"],"description":"[class]: Create getter pattern"},"[class]: Create setter pattern":{"prefix":"bbeo-js-class-setter","body":["set ${1:property_name} (${2:value}) { this.${1:property_name} = ${2:value}; }"],"description":"[class]: Create setter pattern"},"[class]: Create method pattern":{"prefix":"bbeo-js-class-method","body":["${1:method_name} () { ${2:method_body} }"],"description":"[class]: Create method pattern"},"[class]: Create constructor pattern":{"prefix":"bbeo-js-class-constructor","body":["constructor () { ${1:constructor_body} }"],"description":"[class]: Create constructor pattern"},"[class]: Create static method pattern":{"prefix":"bbeo-js-class-staticMethod","body":["static ${1:method_name} () { ${2:method_body} }"],"description":"[class]: Create static method pattern"},"[class]: Create static property pattern":{"prefix":"bbeo-js-class-staticProperty","body":["static ${1:property_name} = ${2:property_value}"],"description":"[class]: Create static property pattern"},"[class]: Create static getter pattern":{"prefix":"bbeo-js-class-staticGetter","body":["static get ${1:property_name} () { return this.${1:property_name}; }"],"description":"[class]: Create static getter pattern"},"[class]: Create static setter pattern":{"prefix":"bbeo-js-class-staticSetter","body":["static set ${1:property_name} (${2:value}) { this.${1:property_name} = ${2:value}; }"],"description":"[class]: Create static setter pattern"},"[class]: Generate class pattern":{"prefix":"bbeo-js-class-genClassPattern","body":["class Circle extends Shape {","  ","  // constructor","  constructor (radius) {","    this.radius = radius","  }","  ","  // methods","   getArea () {","    return Math.PI * 2 * this.radius","  }","  ","  // superclass","   expand (n) {","    return super.expand(n) * Math.PI","  }","  ","  //static method","   static createFromDiameter(diameter) {","    return new Circle(diameter / 2)","  }","}"],"description":"[class]: Generate class pattern"},"[console]: console log":{"prefix":"bbeo-js-console-clg","body":["console.log(${1:object})"],"description":"[console]: console log"},"[console]: console error":{"prefix":"bbeo-js-console-clr","body":["console.error(${1:object})"],"description":"[console]: console error"},"[console]: console table":{"prefix":"bbeo-js-console-clt","body":["console.table(${1:object})"],"description":"[console]: console table"},"[console]: console info":{"prefix":"bbeo-js-console-cli","body":["console.info(${1:object})"],"description":"[console]: console info"},"[console]: console warn":{"prefix":"bbeo-js-console-clw","body":["console.warn(${1:object})"],"description":"[console]: console warn"},"[date]: Create a date object (null args)":{"prefix":"bbeo-js-date-createNullDate","body":["const ${1:date_objVar} = new Date()"],"description":"[date]: Create a date object (null args)"},"[date]: Create a date object (full args)":{"prefix":"bbeo-js-date-createFullDate","body":["const ${1:date_objVar} = new Date(${2:year}, ${3:month}, ${4:day}, ${5:hour}, ${6:minute}, ${7:second}, ${8:millisecond})"],"description":"[date]: Create a date object (full args)"},"[date]: Create a date object (string format)":{"prefix":"bbeo-js-date-createStringDate","body":["const ${1:date_objVar} = new Date(${2:date_string})"],"description":"[date]: Create a date object (date string)"},"[date]: Get current date":{"prefix":"bbeo-js-date-now","body":["${1:date_objVar}.now()"],"description":"[date]: Get current date"},"[date]: Get current day":{"prefix":"bbeo-js-date-day","body":["${1:date_objVar}.getDay()"],"description":"[date]: Get current day"},"[date]: Get current month":{"prefix":"bbeo-js-date-month","body":["${1:date_objVar}.getMonth()"],"description":"[date]: Get current month"},"[date]: Get current year":{"prefix":"bbeo-js-date-year","body":["${1:date_objVar}.getFullYear()"],"description":"[date]: Get current year"},"[date]: Get current hour":{"prefix":"bbeo-js-date-hour","body":["${1:date_objVar}.getHours()"],"description":"[date]: Get current hour"},"[date]: Get current minute":{"prefix":"bbeo-js-date-minute","body":["${1:date_objVar}.getMinutes()"],"description":"[date]: Get current minute"},"[date]: Get current second":{"prefix":"bbeo-js-date-second","body":["${1:date_objVar}.getSeconds()"],"description":"[date]: Get current second"},"[date]: Get current millisecond":{"prefix":"bbeo-js-date-millisecond","body":["${1:date_objVar}.getMilliseconds()"],"description":"[date]: Get current millisecond"},"[date]: Get current time":{"prefix":"bbeo-js-date-time","body":["${1:date_objVar}.getTime()"],"description":"[date]: Get current time"},"[date]: Get current date as string":{"prefix":"bbeo-js-date-toString","body":["${1:date_objVar}.toString()"],"description":"[date]: Get current date as string"},"[date]: Set date":{"prefix":"bbeo-js-date-setDate","body":["${1:date_objVar}.setDate(${2:new_date})"],"description":"[date]: Set date"},"[date]: Set month":{"prefix":"bbeo-js-date-setMonth","body":["${1:date_objVar}.setMonth(${2:new_month})"],"description":"[date]: Set month"},"[date]: Set year":{"prefix":"bbeo-js-date-setYear","body":["${1:date_objVar}.setFullYear(${2:new_year})"],"description":"[date]: Set year"},"[date]: Set hour":{"prefix":"bbeo-js-date-setHour","body":["${1:date_objVar}.setHours(${2:new_hour})"],"description":"[date]: Set hour"},"[date]: Set minute":{"prefix":"bbeo-js-date-setMinute","body":["${1:date_objVar}.setMinutes(${2:new_minute})"],"description":"[date]: Set minute"},"[date]: Set second":{"prefix":"bbeo-js-date-setSecond","body":["${1:date_objVar}.setSeconds(${2:new_second})"],"description":"[date]: Set second"},"[date]: Set millisecond":{"prefix":"bbeo-js-date-setMillisecond","body":["${1:date_objVar}.setMilliseconds(${2:new_millisecond})"],"description":"[date]: Set millisecond"},"[date]: Set time":{"prefix":"bbeo-js-date-setTime","body":["${1:date_objVar}.setTime(${2:new_time})"],"description":"[date]: Set time"},"[destruct]: Destructuring assignment -> array":{"prefix":"bbeo-js-destruct-assignArray","body":["const [${1:var1}, ${2:var2}] = [${3:value1}, ${4:value2}]"],"description":"[destruct]: Destructuring assignment -> array"},"[destruct]: Object destructuring assignment -> object":{"prefix":"bbeo-js-destruct-assignObject","body":["const {${1:attrib1}, ${2:attrib2}} = ${3:object_container}"],"description":"[destruct]: Object destructuring assignment -> object"},"[dom]: Get element by id":{"prefix":"bbeo-js-dom-id","body":["document.getElementById(${1:id})"],"description":"[dom]: Get element by id"},"[dom]: Get element by class":{"prefix":"bbeo-js-dom-class","body":["document.getElementsByClassName(${1:class})"],"description":"[dom]: Get element by class"},"[dom]: Get element by tag":{"prefix":"bbeo-js-dom-tag","body":["document.getElementsByTagName(${1:tag})"],"description":"[dom]: Get element by tag"},"[dom]: Get element by query":{"prefix":"bbeo-js-dom-query","body":["document.querySelector(${1:query})"],"description":"[dom]: Get element by query"},"[dom]: Get element by query all":{"prefix":"bbeo-js-dom-queryAll","body":["document.querySelectorAll(${1:query})"],"description":"[dom]: Get element by query all"},"[dom]: Get element by name":{"prefix":"bbeo-js-dom-name","body":["document.getElementsByName(${1:name})"],"description":"[dom]: Get element by name"},"[dom]: Create html element of tag":{"prefix":"bbeo-js-dom-createHTMLElement","body":["document.createElement(${1:tag})"],"description":"[dom]: Create html element of tag"},"[dom]: Create text node":{"prefix":"bbeo-js-dom-createTextNode","body":["document.createTextNode(${1:text})"],"description":"[dom]: Create text node"},"[dom]: Get element by id and set innerHTML":{"prefix":"bbeo-js-dom-id-innerHTML","body":["document.getElementById(${1:id}).innerHTML = ${2:html}"],"description":"[dom]: Get element by id and set innerHTML"},"[dom]: Get element by id and set textContent":{"prefix":"bbeo-js-dom-id-textContent","body":["document.getElementById(${1:id}).textContent = ${2:text}"],"description":"[dom]: Get element by id and set textContent"},"[dom]: Get element by id and set value":{"prefix":"bbeo-js-dom-id-value","body":["document.getElementById(${1:id}).value = ${2:value}"],"description":"[dom]: Get element by id and set value"},"[dom]: Get element by id and set attribute":{"prefix":"bbeo-js-dom-id-attribute","body":["document.getElementById(${1:id}).setAttribute(${2:attribute}, ${3:value})"],"description":"[dom]: Get element by id and set attribute"},"[dom]: Get element by id and get attribute":{"prefix":"bbeo-js-dom-id-getAttribute","body":["document.getElementById(${1:id}).getAttribute(${2:attribute})"],"description":"[dom]: Get element by id and get attribute"},"[dom]: Get element by id and remove attribute":{"prefix":"bbeo-js-dom-id-removeAttribute","body":["document.getElementById(${1:id}).removeAttribute(${2:attribute})"],"description":"[dom]: Get element by id and remove attribute"},"[dom]: Get element by id and add class":{"prefix":"bbeo-js-dom-id-addClass","body":["document.getElementById(${1:id}).classList.add(${2:class})"],"description":"[dom]: Get element by id and add class"},"[dom]: Get element by id and remove class":{"prefix":"bbeo-js-dom-id-removeClass","body":["document.getElementById(${1:id}).classList.remove(${2:class})"],"description":"[dom]: Get element by id and remove class"},"[dom]: Get element by id and toggle class":{"prefix":"bbeo-js-dom-id-toggleClass","body":["document.getElementById(${1:id}).classList.toggle(${2:class})"],"description":"[dom]: Get element by id and toggle class"},"[dom]: Get element by id and check class":{"prefix":"bbeo-js-dom-id-hasClass","body":["document.getElementById(${1:id}).classList.contains(${2:class})"],"description":"[dom]: Get element by id and check class"},"[dom]: Get element by id and append child":{"prefix":"bbeo-js-dom-id-appendChild","body":["document.getElementById(${1:id}).appendChild(${2:child})"],"description":"[dom]: Get element by id and append child"},"[dom]: Get element by id and remove child":{"prefix":"bbeo-js-dom-id-removeChild","body":["document.getElementById(${1:id}).removeChild(${2:child})"],"description":"[dom]: Get element by id and remove child"},"[dom]: Get element by id and insert before":{"prefix":"bbeo-js-dom-id-insertBefore","body":["document.getElementById(${1:id}).insertBefore(${2:child}, ${3:reference})"],"description":"[dom]: Get element by id and insert before"},"[dom]: Get element by id and insert after":{"prefix":"bbeo-js-dom-id-insertAfter","body":["document.getElementById(${1:id}).insertBefore(${2:child}, ${3:reference}.nextSibling)"],"description":"[dom]: Get element by id and insert after"},"[dom]: Get element by id and replace child":{"prefix":"bbeo-js-dom-id-replaceChild","body":["document.getElementById(${1:id}).replaceChild(${2:child}, ${3:reference})"],"description":"[dom]: Get element by id and replace child"},"[dom]: Get element by id and retrieve all child nodes]":{"prefix":"bbeo-js-dom-id-childNodes","body":["document.getElementById(${1:id}).childNodes"],"description":"[dom]: Get element by id and retrieve all child nodes]"},"[dom]: Get element by id and retrieve first child node]":{"prefix":"bbeo-js-dom-id-firstChild","body":["document.getElementById(${1:id}).firstChild"],"description":"[dom]: Get element by id and retrieve first child node]"},"[dom]: Get element by id and retrieve last child node]":{"prefix":"bbeo-js-dom-id-lastChild","body":["document.getElementById(${1:id}).lastChild"],"description":"[dom]: Get element by id and retrieve last child node]"},"[dom]: Get element by id and retrieve parent node]":{"prefix":"bbeo-js-dom-id-parentNode","body":["document.getElementById(${1:id}).parentNode"],"description":"[dom]: Get element by id and retrieve parent node]"},"[dom]: Get element by id and add event listener]":{"prefix":"bbeo-js-dom-id-addEventListener","body":["document.getElementById(${1:id}).addEventListener(${2:click, 'keypress, scroll, mouseenter, mouseout, input, submit, load'}, ${3:callback})"],"description":"[dom]: Get element by id and add event listener]"},"[dom]: Get target value from event]":{"prefix":"bbeo-js-dom-eventTargetValue","body":["${1:e}.target.value"],"description":"[dom]: Get target value from event]"},"[dom]: Get element by id and add event listener with prevent default]":{"prefix":"bbeo-js-dom-id-addEventListenerWithpreventDefault","body":["document.getElementById(${1:id}).addEventListener(${2:'submit'}, ${3:e} => {","    ${3:e}.preventDefault()","})"],"description":"[dom]: Get element by id and add event listener with prevent default]"},"[dom]: Get element by id and add event listener with stop propagation]":{"prefix":"bbeo-js-dom-id-addEventListenerWithstopPropagation","body":["document.getElementById(${1:id}).addEventListener(${2:click, 'keypress, scroll, mouseenter, mouseout, input, submit, load'}, ${3:e} => {","    ${3:e}.stopPropagation()","})"],"description":"[dom]: Get element by id and add event listener with stop propagation]"},"[func]: Create arrow function":{"prefix":"bbeo-js-func-arrowFunc","body":["const ${1:func_name} = (${2:args}) => {","  ${3:code...}","}"],"description":"[func]: Create arrow function"},"[gen]: Swap 2 values ​​from 2 variables":{"prefix":"bbeo-js-gen-permut","body":["[${1:a},${2:b}] = [${2:b},${1:a}]"],"description":"[gen]: Swap 2 values ​​from 2 variables"},"[gen]: Id generator":{"prefix":"bbeo-js-gen-idGen","body":["let ${1:id_name} = idMaker()","${1:id_name}.next().value  // → 0","${1:id_name}.next().value  // → 1","${1:id_name}.next().value  // → 2"],"description":"[gen]: Id generator"},"[gen]: Alphabet generator":{"prefix":"bbeo-js-gen-alphaGen","body":["String.fromCharCode(...Array(123).keys()).slice(97)"],"description":"[gen]: Alphabet generator"},"[gen]: Number generator":{"prefix":"bbeo-js-gen-numGen","body":["[...Array(${1:min(0)~max(n+1)})].map((_, i) => i); "],"description":"[gen]: Number generator"},"[hybrid]: Find index of element -> number":{"prefix":"bbeo-js-hybrid-indexOfElement","body":["${1:hybr_var}.indexOf(${2:e})"],"description":"[hybrid]: Find index of element"},"[hybrid]: Check the existence of an element -> boolean":{"prefix":"bbeo-js-hybrid-includesElement","body":["${1:hybr_var}.includes(${2:e})"],"description":"[hybrid]: Check the existence of an element"},"[hybrid]: Length of string/array -> number":{"prefix":"bbeo-js-hybrid-length","body":["${1:hybr_var}.length"],"description":"[hybrid]: Length of string/array"},"[math]: Format a number in fixed-dot notation -> number":{"prefix":"bbeo-js-math-dot","body":["${1:number_var}.toFixed(${2:decal})"],"description":"[math]: Format a number in fixed-dot notation -> number"},"[math]: Power of number":{"prefix":"bbeo-js-math-pow","body":["${1:number_var} ** ${2:exp}"],"description":"[math]: Power of number"},"[math]: Get MAX element":{"prefix":"bbeo-js-math-max","body":["Math.max(... ${1: element})"],"description":"[math]: Get MAX element"},"[math]: Get MIN element":{"prefix":"bbeo-js-math-min","body":["Math.min(... ${1: element})"],"description":"[math]: Get MAX element"},"[math]: Get exponent of a number":{"prefix":"bbeo-js-math-expOfNumber","body":["Math.log(${solution})/Math.log(${base})"],"description":"[math]: Get exponent of a number"},"[math]: Get square of a number":{"prefix":"bbeo-js-math-sqrt","body":["Math.sqrt(${1:number})"],"description":"[math]: Get square of a number"},"[math]: Get absolute value of a number":{"prefix":"bbeo-js-math-abs","body":["Math.abs(${1:number})"],"description":"[math]: Get absolute value of a number"},"[math]: Get round value of a number":{"prefix":"bbeo-js-math-round","body":["Math.round(${1:number})"],"description":"[math]: Get round value of a number"},"[math]: Get ceil value of a number":{"prefix":"bbeo-js-math-ceil","body":["Math.ceil(${1:number})"],"description":"[math]: Get ceil value of a number"},"[math]: Get floor value of a number":{"prefix":"bbeo-js-math-floor","body":["Math.floor(${1:number})"],"description":"[math]: Get floor value of a number"},"[math]: Get random value between 0 and 1":{"prefix":"bbeo-js-math-random","body":["Math.random()"],"description":"[math]: Get random value between 0 and 1"},"[math]: Get random value between 0 and max":{"prefix":"bbeo-js-math-random-max","body":["Math.floor(Math.random() * ${1:max})"],"description":"[math]: Get random value between 0 and max"},"[math]: Get random value between min and max":{"prefix":"bbeo-js-math-random-minMax","body":["Math.floor(Math.random() * (${1:max} - ${2:min}) + ${2:min})"],"description":"[math]: Get random value between min and max"},"[math]: Get PI value":{"prefix":"bbeo-js-math-pi","body":["Math.PI"],"description":"[math]: Get PI value"},"[math]: Get E value":{"prefix":"bbeo-js-math-e","body":["Math.E"],"description":"[math]: Get E value"},"[math]: Get LN2 value":{"prefix":"bbeo-js-math-ln2","body":["Math.LN2"],"description":"[math]: Get LN2 value"},"[math]: Get LN10 value":{"prefix":"bbeo-js-math-ln10","body":["Math.LN10"],"description":"[math]: Get LN10 value"},"[mixte]: Search a specific element -> mixed":{"prefix":"bbeo-js-mixte-findElement","body":["${1:mixte_var}.find(${2:e} => ${2:e} ${3:===} ${4:foo})"],"description":"[mixte]: Search a specific element -> mixed"},"[mixte]: Check one or more specific element.s of an array/object (no size modification) -> boolean":{"prefix":"bbeo-js-mixte-someElement","body":["${1:mixte_var}.some(${2:e} => ${2:e} ${3:===} ${4:foo})"],"description":"[mixte]: Check one or more specific element.s of an array/object (no size modification) -> boolean"},"[mixte]: Check the integrity of the elements of an array/object (no size modification) -> boolean":{"prefix":"bbeo-js-mixte-everyElement","body":["${1:mixte_var}.every(${2:e} => ${2:e} ${3:===} ${4:foo})"],"description":"[mixte]: Check the integrity of the elements of an array/object (no size modification) -> boolean"},"[mixte]: Processing of different element of the array/object (no modification of the size) -> mixed":{"prefix":"bbeo-js-mixte-mapElement","body":["${1:mixte_var}.map(${2:e} => {${3:expression}})"],"description":"[mixte]: Processing of different element of the array/object (no modification of the size) -> mixed"},"[mixte]: Filter the element of an array/object (size modification) -> mixed":{"prefix":"bbeo-js-mixte-filterElement","body":["${1:mixte_var}.filter(${2:e} => {${3:condition}})"],"description":"[mixte]: Filter the element of an array/object (size modification) -> mixed"},"[mixte]: Processing each element of the array/object to obtain a single value -> number":{"prefix":"bbeo-js-mixte-reduceElement","body":["${1:mixte_var}.reduce((${2:total, e}) => {${3:total + e}})"],"description":"[mixte]: Processing each element of the array/object to obtain a single value -> number"},"[mixte]: Fill an array/object with a static value -> mixed":{"prefix":"bbeo-js-mixte-fillElement","body":["${1:mixte_var}.fill(${2:start_index},${3:foo})"],"description":"[mixte]: Fill an array/object with a static value -> mixed"},"[mixte]: Browse the elements of an array/object -> any":{"prefix":"bbeo-js-mixte-foreachElement","body":["${1:mixte_var}.forEach((${2:e}) => {","    ${3:expression}","})"],"description":"[mixte]: Browse the elements of an array/object -> any"},"[module]: Imports entire module statement in ES6 syntax":{"prefix":"bbeo-js-module-imp","body":["import ${1:module_name} from ${2:module_source};"],"description":"[module]: Imports entire module statement in ES6 syntax"},"[module]: Imports only a portion of the module in ES6 syntax (destructuring assignment)":{"prefix":"bbeo-js-module-imd","body":["import { ${1:module_name} } from ${2:module_source};"],"description":"[module]: Imports only a portion of the module in ES6 syntax (destructuring assignment)"},"[object]: Extract objecy values -> array":{"prefix":"bbeo-js-object-extractValues","body":["Object.values(${1:object_var})"],"description":"[object]: Extract objecy values"},"[object]: Extract object entries -> array":{"prefix":"bbeo-js-object-extractEntries","body":["Object.entries(${1:object_var})"],"description":"[object]: Extract object entries"},"[object]: Get object length":{"prefix":"bbeo-js-object-length","body":["Object.keys(${1:object_var}).length"],"description":"[object]: Get object length"},"[regex]: Extract number in string ":{"prefix":"bbeo-js-regex-numExtract","body":["${1:string_var}.match(/\\d/g);"],"description":"[regex]: Extract number in string "},"[regex]: Get total occurrence of argument in string":{"prefix":"bbeo-js-regex-occTotal","body":["const ${1:string_var} = ${2:string_value}","${3:occ_name}=(${1:string_var}.match(/${4:arg}/g)||[]).length "],"description":"[regex]: Get total occurrence of argument in string"},"[regex]: {arg} must be present from {string_var}":{"prefix":"bbeo-js-regex-ifExist","body":["${1:string_var}.match(/${2:arg}/)"],"description":"[regex]: {arg} must be present from {string_var}"},"[regex]: Start of {arg} ":{"prefix":"bbeo-js-regex-startOf","body":["${1:string_var}.match(/^${2:arg}/)"],"description":"[regex]: Start of {arg} "},"[regex]: End of {arg} ":{"prefix":"bbeo-js-regex-endOf","body":["${1:string_var}.match(/^${2:arg}/)"],"description":"[regex]: End of {arg} "},"[regex]: {a} OR {b} must be present from {string_var}":{"prefix":"bbeo-js-regex-ifExistOR","body":["${1:string_var}.match(/${2:a}|${3:b}/)"],"description":"[regex]: {a} OR {b} must be present from {string_var}"},"[spread]: Merge several arrays (concat() alternative) -> array":{"prefix":"bbeo-spread-mergeArrays","body":["[...${1:arr1}, ...${2:arr2}]"],"description":"[spread]: Merge several arrays (concat() alternative) -> array"},"[spread]: Merge several objects (Object.assign() alternative) -> object":{"prefix":"bbeo-spread-mergeObjects","body":["{...${1:obj1}, ...${2:obj2}}"],"description":"[spread]: Merge several objects (Object.assign() alternative) -> object"},"[spread]: Remove duplicates from an array -> array":{"prefix":"bbeo-spread-removeDuplicates","body":["[...new Set(${1:array_var})]"],"description":"[spread]: Remove duplicates from an array -> array"},"[spread]: Add a new prop/value to an existing object -> object":{"prefix":"bbeo-spread-addProp","body":["{...${1:obj_var}, ${2:newProp}: ${3:foo}}"],"description":"[spread]: Add a new prop/value to an existing object -> object"},"[string]: Replace single occurrence of value -> string":{"prefix":"bbeo-js-string-replace","body":["${1:string_var}.replace(${2:'input'}, ${3:'output'})"],"description":"[string]: Replace single occurrence of value -> string"},"[string]: Replace all occurrences of value -> string":{"prefix":"bbeo-js-string-replaceAll","body":["${1:string_var}.replaceAll(${2:'input'}, ${3:'output'})"],"description":"[string]: Replace all occurrences of value -> string"},"[string]: Split string into array by delimiter -> array":{"prefix":"bbeo-js-string-split","body":["${1:string_var}.split(${2:'delimiter'})"],"description":"[string]: Split string into array -> array"},"[string]: Split a string [start, end+1] -> string":{"prefix":"bbeo-js-string-sub","body":["${1:string_var}.substr(${2:start}, ${3:end+1})"],"description":"[string]: Split a string [start, end+1] -> string"},"[string]: Repeat a string N times -> string":{"prefix":"bbeo-js-string-repeat","body":["${1:string_var}.repeat(${2:N})"],"description":"[string]: Repeat a string N times -> string"},"[string]: Remove the white space at the beginning and at the end of a string -> string":{"prefix":"bbeo-js-string-trim","body":["${1:string_var}.trim()"],"description":"[string]: Remove the white space at the beginning and at the end of a string -> string"},"[string]: Get chatAt index -> string":{"prefix":"bbeo-js-string-charAt","body":["${1:string_var}.charAt(${2:index})"],"description":"[string]: Get chatAt index -> string"},"[string]: Check start of a string -> boolean":{"prefix":"bbeo-js-string-startsWith","body":["${1:string_var}.startsWith(${2:input}, ${3:start_index})"],"description":"[string]: Check start of a string -> boolean"},"[string]: Check end of a string -> boolean":{"prefix":"bbeo-js-string-endsWith","body":["${1:string_var}.endsWith(${2:input}, ${3:end_index})"],"description":"[string]: Check end of a string -> boolean"},"[string]: String to lower case -> string":{"prefix":"bbeo-js-string-toLowerCase","body":["${1:string_var}.toLowerCase()"],"description":"[string]: String to lower case -> string"},"[string]: String to upper case -> string":{"prefix":"bbeo-js-string-toUpperCase","body":["${1:string_var}.toUpperCase()"],"description":"[string]: String to upper case -> string"},"[struct]: Add to queue -> array":{"prefix":"bbeo-js-struct-addToQueue","body":["${1:array_var}.push(${2:e})"],"description":"[struct]: Add to queue -> array"},"[struct]: Add to head -> array":{"prefix":"bbeo-js-struct-addToHead","body":["${1:array_var}.unshift(${2:e})"],"description":"[struct]: Add to head -> array"},"[struct]: Delete at tail -> array":{"prefix":"bbeo-js-struct-deleteAtTail","body":["${1:array_var}.pop(${2:e})"],"description":"[struct]: Delete at tail -> array"},"[struct]: Delete at head -> array":{"prefix":"bbeo-js-struct-deleteAtHead","body":["${1:array_var}.shift(${2:e})"],"description":"[struct]: Delete at head -> array"}}