{"[console]: console log":{"prefix":"bbeo-js-console-clg","body":["console.log(${1:object})"],"description":"[console]: console log"},"[console]: console error":{"prefix":"bbeo-js-console-clr","body":["console.error(${1:object})"],"description":"[console]: console error"},"[console]: console table":{"prefix":"bbeo-js-console-clt","body":["console.table(${1:object})"],"description":"[console]: console table"},"[console]: console info":{"prefix":"bbeo-js-console-cli","body":["console.info(${1:object})"],"description":"[console]: console info"},"[console]: console warn":{"prefix":"bbeo-js-console-clw","body":["console.warn(${1:object})"],"description":"[console]: console warn"},"[import]: Imports entire module statement in ES6 syntax":{"prefix":"bbeo-js-module-imp","body":["import ${1:module_name} from ${2:module_source};"],"description":"[import]: Imports entire module statement in ES6 syntax"},"[import]: [import]: Imports only a portion of the module in ES6 syntax (destructuring assignment)":{"prefix":"bbeo-js-module-imd","body":["import { ${1:module_name} } from ${2:module_source};"],"description":"[import]: Imports only a portion of the module in ES6 syntax (destructuring assignment)"},"[func]: Create arrow function":{"prefix":"bbeo-js-func-arrowfunc","body":["const ${1:func_name} = (${2:args}) => {","  ${3:code...}","}"],"description":"[func]: Create arrow function"},"[gen]: Swap 2 values ​​from 2 variables":{"prefix":"bbeo-js-gen-permut","body":["[${1:a},${2:b}] = [${2:b},${1:a}]"],"description":"[gen]: Swap 2 values ​​from 2 variables"},"[gen]: Id generator":{"prefix":"bbeo-js-gen-idgen","body":["let ${1:id_name} = idMaker()","${1:id_name}.next().value  // → 0","${1:id_name}.next().value  // → 1","${1:id_name}.next().value  // → 2"],"description":"[gen]: Id generator"},"[gen]: Alphabet generator":{"prefix":"bbeo-js-gen-alphagen","body":["String.fromCharCode(...Array(123).keys()).slice(97)"],"description":"[gen]: Alphabet generator"},"[gen]: Number generator":{"prefix":"bbeo-js-gen-numgen","body":["[...Array(${1:min(0)~max(n+1)})].map((_, i) => i); "],"description":"[gen]: Number generator"},"[regex]: Extract number in string ":{"prefix":"bbeo-js-regex-numExtract","body":["${1:string_var}.match(/\\d/g);"],"description":"[regex]: Extract number in string "},"[regex]: Get total occurrence of argument in string":{"prefix":"bbeo-js-regex-occTotal","body":["const ${1:string_var} = ${2:string_value}","${3:occ_name}=(${1:string_var}.match(/${4:arg}/g)||[]).length "],"description":"[regex]: Get total occurrence of argument in string"},"[regex]: {arg} must be present from {string_var}":{"prefix":"bbeo-js-regex-ifExist","body":["${1:string_var}.match(/${2:arg}/)"],"description":"[regex]: {arg} must be present from {string_var}"},"[regex]: Start of {arg} ":{"prefix":"bbeo-js-regex-startof","body":["${1:string_var}.match(/^${2:arg}/)"],"description":"[regex]: Start of {arg} "},"[regex]: End of {arg} ":{"prefix":"bbeo-js-regex-endof","body":["${1:string_var}.match(/^${2:arg}/)"],"description":"[regex]: End of {arg} "},"[regex]: {a} OR {b} must be present from {string_var}":{"prefix":"bbeo-js-regex-ifExistOR","body":["${1:string_var}.match(/${2:a}|${3:b}/)"],"description":"[regex]: {a} OR {b} must be present from {string_var}"}}